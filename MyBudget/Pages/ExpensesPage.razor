@page "/expensespage"
@using MyBudget.Services
@using MyBudget.Models
@using MyBudget.Helpers
@inject IService<Expenses> expenseService
@inject ITypeService<PaymentFrequencyTypes> paymentFrequencyTypeService
@inject ITypeService<ExpenseTypes> expenseTypeService
@inject IJSRuntime jsRuntime

<h3 style="text-align:center">Expenses</h3>
<p style="color:red">@Error</p>

@if (expensesList == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<MudTable Items="@ExpenseItems" Striped="true" class="table-styles" Dense="true" Filter="new Func<Expenses, bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
		<ToolBarContent>
			<MudText Typo="Typo.h6">Expenses</MudText>
			<MudSpacer />
			<MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
		</ToolBarContent>
		<HeaderContent>
			<MudTh Style="display:none;">Expense Id</MudTh>
			<MudTh>Expense Name</MudTh>
			<MudTh>Expense Type Id</MudTh>
			<MudTh>Payment Frequency Type Id</MudTh>
			<MudTh>Expense Amount</MudTh>
			<MudTh>Expense Initial Date</MudTh>
			<MudTh></MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="Expense Id">@context.ExpensesId</MudTd>
			<MudTd DataLabel="Expense Name">@context.ExpensesName</MudTd>
			<MudTd DataLabel="Expense Type Id">@GetExpenseTypeName(context.ExpenseTypeId, expenseTypesList)</MudTd>
			<MudTd DataLabel="Payment Frequency Type Id">@GetPaymentFrequencyTypeName(context.PaymentFrequencyTypeId, paymentFrequencyTypesList)</MudTd>
			<MudTd DataLabel="Expense Amount">@context.ExpenseAmount.ToString("0.00")</MudTd>
			<MudTd DataLabel="Expense Initial Date">@context.InitialExpenseDate.ToShortDateString()</MudTd>
			<MudTd>
				<MudIcon Icon="@Icons.TwoTone.Edit" Title="Edit" @onclick="(() => EditRecord(context))" class="mud-table-button" Color="Color.Info" />
				<MudIcon Icon="@Icons.TwoTone.Delete" Title="Delete" @onclick="(() => DeleteConfirm(context))" class="mud-table-button" Color="Color.Error" />
			</MudTd>
		</RowTemplate>
		<PagerContent>
			<MudTablePager />
		</PagerContent>
	</MudTable>

	<div id="add-button">
		<MudButton Variant="Variant.Filled" Color="Color.Success" @onclick="AddNewRecord">
			Add New Expense
		</MudButton>
	</div>

	@if (ShowPopup)
	{
		<div class="modal" tabindex="-1" style="display:block" role="dialog">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h3 class="modal-title">Edit Expense</h3>
						<!-- Button to close the popup -->
						<button type="button" class="close"
						@onclick="ClosePopup">
							<span aria-hidden="true">X</span>
						</button>
					</div>
					<!-- Edit form for the current expense -->
					<div class="modal-body">
						<label for="expenseid">Expense Id: </label>
						<input class="form-control" type="number" disabled="disabled"
					   @bind="expense.ExpensesId" id="expenseid" />
						<label for="expensename">Expense Name: </label>
						<input class="form-control" type="text"
					   placeholder="Expense Name"
					   @bind="expense.ExpensesName" id="expensename" />

						<label for="expensetype">Expense Type: </label>
						<select class="form-select" title="Expense Type Required" @bind="expense.ExpenseTypeId" id="expensetype">
							<option value="Select" disabled="disabled">Choose Expense Type</option>
							@foreach (var expenseType in expenseTypesList)
							{
								<option value="@expenseType.ExpenseTypeId">@expenseType.ExpenseType</option>
							}
						</select>

						<label for="paymentfrequency">Payment Frequency: </label>
						<select class="form-select" title="Payment Frequency Required" @bind="expense.PaymentFrequencyTypeId" id="paymentfrequency">
							<option value="Select" disabled="disabled">Choose Payment Frequency</option>
							@foreach (var type in paymentFrequencyTypesList)
							{
								<option value="@type.PaymentFrequencyTypeId">@type.PaymentFrequencyType</option>
							}
						</select>

						<label for="expenseamount">Expense Amount: </label>
						<input class="form-control" type="number"
					   placeholder="Expense Amount"
					   @bind="expense.ExpenseAmount" id="expenseamount" min="0" />
						<label for="expensedate">Expense Date:</label>
						<input class="form-control" type="date"
					   placeholder="Expense Date"
					   @bind="expense.InitialExpenseDate" id="expensedate" />
						<br />
						<!-- Button to save the expense -->
						<button class="btn btn-success"
						@onclick="SaveRecord">
							Save
						</button>&nbsp;
						<!-- Only show delete button if not a new record -->
						@if (expense.ExpensesId > 0)
						{
							<!-- Button to delete the expense -->
							<button class="btn btn-danger"
						@onclick="() => DeleteRecord(expense)">
								Delete
							</button>
						}
					</div>
				</div>
			</div>
		</div>
	}
}

@code {
	string Error = "";
	List<Expenses> expensesList = new();
	List<ExpenseTypes> expenseTypesList = new();
	List<PaymentFrequencyTypes> paymentFrequencyTypesList = new();
	Expenses expense = new();
	bool ShowPopup = false;

	private string searchString1 = "";
	private Expenses selectedItem1 = null;
	private HashSet<Expenses> selectedItems = new();
	private IEnumerable<Expenses> ExpenseItems = new List<Expenses>();

	protected override async Task OnInitializedAsync()
	{
		expensesList = await expenseService.GetList();
		ExpenseItems = expensesList;
		expenseTypesList = await expenseTypeService.GetList();
		paymentFrequencyTypesList = await paymentFrequencyTypeService.GetList();
	}

	void ClosePopup()
	{
		ShowPopup = false;
	}

	void AddNewRecord()
	{
		expense = new Expenses()
			{
				ExpensesId = 0,
				InitialExpenseDate = DateTime.Today.Date
			};
		ShowPopup = true;
	}

	void EditRecord(Expenses expenseToEdit)
	{
		expense = expenseToEdit;
		ShowPopup = true;
	}

	async Task SaveRecord()
	{
		ShowPopup = false;
		Error = "";

		try
		{
			if (expense.ExpensesId == 0)
			{
				Expenses newExpense = new()
				{
					ExpensesName = expense.ExpensesName,
					ExpenseTypeId = expense.ExpenseTypeId,
					PaymentFrequencyTypeId = expense.PaymentFrequencyTypeId,
					ExpenseAmount = expense.ExpenseAmount,
					InitialExpenseDate = expense.InitialExpenseDate
				};

				var createdExpense = await expenseService.CreateRecord(newExpense);

				switch (createdExpense.ExpensesId)
				{
					case -1:
						Error = "Duplicate Expense name, please try again";
						break;
					case 0:
						Error = "Error processing request, please try again";
						break;
					default:
						expensesList = await expenseService.GetList();
						ExpenseItems = expensesList;
						break;
				}
			}
			else
			{
				var updatedRecord = await expenseService.UpdateRecord(expense);
				if (updatedRecord.ExpensesId == -1)
				{
					Error = "Name already used, please try again";
					expensesList = await expenseService.GetList();
				}
			}
		}
		catch (Exception e)
		{
			Error = e.Message;
		}
	}

	async Task DeleteConfirm(Expenses expense)
	{
		bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Record?");
		if (confirmed)
		{
			await DeleteRecord(expense);
		}
	}

	async Task DeleteRecord(Expenses expense)
	{
		ShowPopup = false;
		Error = "";

		try
		{
			await expenseService.DeleteRecord(expense);
			expensesList = await expenseService.GetList();
			ExpenseItems = expensesList;
		}
		catch (Exception e)
		{
			Error = e.Message;
		}
	}

	// helper methods

	string GetExpenseTypeName(int id, List<ExpenseTypes> expenseTypeList)
	{
		return ItemFromList.GetNameFromTypeList(id, expenseTypeList);
	}

	string GetPaymentFrequencyTypeName(int id, List<PaymentFrequencyTypes> paymentFrequencyTypeList)
	{
		return ItemFromList.GetNameFromTypeList(id, paymentFrequencyTypeList);
	}

	// Search Functions

	private bool FilterFunc1(Expenses expense) => FilterFunc(expense, searchString1);

	private bool FilterFunc(Expenses expense, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (expense.ExpensesName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if ($"{expense.ExpenseAmount.ToString("0.00")}".Contains(searchString))
			return true;
		if ($"{expense.ExpenseTypeId} {expense.PaymentFrequencyTypeId}".Contains(searchString))
			return true;
		if ($"{expense.InitialExpenseDate.ToShortDateString()}".Contains(searchString))
			return true;
		return false;
	}
}
