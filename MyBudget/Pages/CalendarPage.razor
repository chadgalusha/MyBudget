@page "/calendarpage"
@using MyBudget.Helpers
@using MyBudget.Components
@using MyBudget.Models
@using MyBudget.Services
@using System.Globalization
@inject IHistoryService<ExpenseHistory> expenseHistoryService
@inject IService<ExpenseCategories> expenseCategoryService
@inject IHistoryService<IncomeHistory> incomeHistoryService
@inject ICalendarProcessor calendarProcessor

@if (thisMonthIncomeHistoryList == null || thisMonthExpenseHistoryList == null)
{
	<MyBudgetLoadingIndicator />
}
else
{
	<div>
		<div class="budget-calendar">
			<MudToolBar class="calendar-date-bar">
				<MudIconButton Color="Color.Info" Icon="@Icons.Filled.ArrowCircleLeft"></MudIconButton>
				<h3 style="text-align:center;">@GetMonthString(month) @year</h3>
				<MudIconButton Color="Color.Info" Icon="@Icons.Filled.ArrowCircleRight"></MudIconButton>
			</MudToolBar>

			<div class="calendar-container">
				<div class="calendar-header">
					<div>Sunday</div>
					<div>Monday</div>
					<div>Tuesday</div>
					<div>Wednesday</div>
					<div>Thursday</div>
					<div>Friday</div>
					<div>Saturday</div>
				</div>

				@*<div class="calendar-grid">
					@{count = 1;}
					@for (int i = 0; i <= total; i++)
					{
						if (i < startingIndex)
						{
							<div id="notMonthDay"></div>
						}
						else if (i > endingIndex)
						{
							<div id="notMonthDay"></div>
						}
						else
						{
							@* Get list<T> for current day of types ExpenseHistory / IncomeHistory 
							thisDayIncomeHistoryList = GetIncomeHistoryListForDay(count);
							thisDayExpenseHistoryList = GetExpenseHistoryListForDay(count);

							if (count == today)
							{
								<div id="currentDay">
									<h6>@count</h6>
									@if (thisDayIncomeHistoryList.Count != 0)
									{
										foreach (var income in thisDayIncomeHistoryList)
										{
											<div id="incomeItem" style="text-align:center;">@income.IncomeName</div>
										}
									}
									@if (thisDayExpenseHistoryList.Count != 0)
									{
										foreach (var expense in thisDayExpenseHistoryList)
										{
											<div id="expenseItem" style="text-align:center;">@expense.ExpenseName</div>
										}
									}
								</div>
								count++;
							}
							else
							{
								<div id="monthDay">
									<h6>@count</h6>
									@if (thisDayIncomeHistoryList.Count != 0)
									{
										foreach (var income in thisDayIncomeHistoryList)
										{
											<div id="incomeItem" style="text-align:center;">@income.IncomeName</div>
										}
									}
									@if (thisDayExpenseHistoryList.Count != 0)
									{
										foreach (var expense in thisDayExpenseHistoryList)
										{
											<div id="expenseItem" style="text-align:center;">@expense.ExpenseName</div>
										}
									}
								</div>
								count++;
							}
						}
					}
				</div>*@
				<CalendarGrid startingIndex="@startingIndex" endingIndex="@endingIndex" today="@today" 
					thisMonthIncomeHistoryList="@thisMonthIncomeHistoryList" thisMonthExpenseHistoryList="@thisMonthExpenseHistoryList" />
			</div>
		</div>
		<div class="budget-calendar-menu">
			<h4>@GetMonthString(selectedDateTime.Month) @selectedDateTime.Day, @selectedDateTime.Year</h4>
			<MudButtonGroup Color="Color.Info" Variant="Variant.Outlined" VerticalAlign="true" style="margin: 5px 10px 5px;display:flex;justify-content:center;">
				<MudButton OnClick="TurnOnExpenseHistory">New Expense History</MudButton>
				<MudButton OnClick="TurnOnIncomeHistory">New Income History</MudButton>
			</MudButtonGroup>

			<ExpenseHistoryForm selectedDate="selectedDateTime" expenseHistory="expenseHistory" expenseCategoryList="expenseCategoryList"
			SaveExpenseHistory="() => SaveExpenseHistoryAsync(expenseHistory)" CancelExpenseHistory="CancelExpenseHistory" @ref="expenseHistoryForm"
			UpdateExpenseHistory="() => UpdateExpenseHistoryAsync(expenseHistory)" DeleteExpenseHistory="() => DeleteConfirmExpenseHistory(expenseHistory)" />

			<IncomeHistoryForm @ref="incomeHistoryForm" selectedDate="selectedDateTime" incomeHistory="incomeHistory"
			SaveIncomeHistory="() => SaveIncomeHistoryAsync(incomeHistory)" CancelIncomeHistory="CancelIncomeHistory"
			UpdateIncomeHistory="() => UpdateIncomeHistoryAsync(incomeHistory)" DeleteIncomeHistory="() => DeleteIncomeHistoryAsync(incomeHistory)"/>
		</div>
	</div>
}

@code {

	int total = 41; // inclues 0 for total of 42

	[Inject] ISnackbar Snackbar { get; set; }
	[Inject] IDialogService DialogService { get; set; }

	DateTime currentDateTime;
	int year;
	int month;
	int today;
	int startingIndex;
	int endingIndex;
	int count = 1;
	// selectedDateTime for calendar menu
	DateTime selectedDateTime;

	// Component variable
	ExpenseHistoryForm expenseHistoryForm;
	IncomeHistoryForm incomeHistoryForm;

	// Model variables
	ExpenseHistory expenseHistory = new();
	List<ExpenseCategories> expenseCategoryList = new();
	IncomeHistory incomeHistory = new();

	List<IncomeHistory> thisMonthIncomeHistoryList;
	List<ExpenseHistory> thisMonthExpenseHistoryList;

	List<IncomeHistory> thisDayIncomeHistoryList;
	List<ExpenseHistory> thisDayExpenseHistoryList;

	protected override async Task OnInitializedAsync()
	{
		currentDateTime = DateTime.Now;
		year = currentDateTime.Year;
		month = currentDateTime.Month;
		today = currentDateTime.Day;
		startingIndex = GetFirstOfMonthStartingIndex();
		endingIndex = startingIndex + GetNumberOfDaysInMonth() - 1;
		selectedDateTime = currentDateTime;

		expenseHistory = GetNewExpenseHistory();
		expenseCategoryList = await expenseCategoryService.GetList();

		incomeHistory = GetNewIncomeHistory();

		thisMonthIncomeHistoryList = GetIncomeHistoryList(year, month);
		thisMonthExpenseHistoryList = GetExpenseHistoryList(year, month);
	}

	int GetFirstOfMonthStartingIndex()
	{
		return calendarProcessor.IntForFirstDayOfMonth(year, month);
	}

	int GetNumberOfDaysInMonth()
	{
		return calendarProcessor.NumberDaysInMonth(year, month);
	}

	string GetMonthString(int month)
	{
		return calendarProcessor.GetMonthString(month);
	}

	// Calendar methods

	List<IncomeHistory> GetIncomeHistoryListForDay(int currentDay)
	{
		return thisMonthIncomeHistoryList.Where(i => i.IncomeDate.Day == currentDay).ToList();
	}

	List<ExpenseHistory> GetExpenseHistoryListForDay(int currentDay)
	{
		return thisMonthExpenseHistoryList.Where(e => e.ExpenseDate.Day == currentDay).ToList();
	}

	// Expense History methods

	List<ExpenseHistory> GetExpenseHistoryList(int year, int month)
	{
		return expenseHistoryService.GetListByYearMonth(year, month);
	}

	ExpenseHistory GetNewExpenseHistory()
	{
		return new() { ExpenseHistoryId = 0, ExpenseDate = selectedDateTime, ExpenseCategoryId = 1 };
	}

	async Task SaveExpenseHistoryAsync(ExpenseHistory expense)
	{
		try
		{
			await expenseHistoryService.CreateRecord(expense);
			Snackbar.Add($"Created new Expense History: {expense.ExpenseName} {expense.ExpenseDate}", Severity.Success);
			HideExpenseHistoryForm();
			expenseHistory = GetNewExpenseHistory();
		}
		catch (Exception e)
		{
			Snackbar.Add(e.Message, Severity.Error);
		}
	}

	async Task UpdateExpenseHistoryAsync(ExpenseHistory expense)
	{
		try
		{
			await expenseHistoryService.UpdateRecord(expense);
		}
		catch (Exception e)
		{
			Snackbar.Add(e.Message, Severity.Error);
		}
	}

	async Task DeleteConfirmExpenseHistory(ExpenseHistory expenseHistory)
	{
		bool? confirmed = await DialogService.ShowMessageBox(
			"Warning", $"Permanently Delete {expenseHistory.ExpenseName} : {expenseHistory.ExpenseDate.ToShortDateString()}?",
			yesText: "Delete", cancelText: "Cancel");

		if (confirmed == true) { await DeleteExpenseHistoryAsync(expenseHistory); }
	}

	async Task DeleteExpenseHistoryAsync(ExpenseHistory expense)
	{
		try
		{
			await expenseHistoryService.DeleteRecord(expense);
		}
		catch (Exception e)
		{
			Snackbar.Add(e.Message, Severity.Error);
		}
	}

	// Income History Methods

	List<IncomeHistory> GetIncomeHistoryList(int year, int month)
	{
		return incomeHistoryService.GetListByYearMonth(year, month);
	}

	IncomeHistory GetNewIncomeHistory()
	{
		return new() { IncomeHistoryId = 0, IncomeDate = selectedDateTime };
	}

	async Task SaveIncomeHistoryAsync(IncomeHistory income)
	{
		try
		{
			await incomeHistoryService.CreateRecord(income);
			Snackbar.Add($"Created new Income history: {income.IncomeName} {income.IncomeDate}", Severity.Success);
			HideIncomeHistoryForm();
			incomeHistory = GetNewIncomeHistory();
		}
		catch (Exception e)
		{
			Snackbar.Add(e.Message, Severity.Error);
		}
	}

	async Task UpdateIncomeHistoryAsync(IncomeHistory income)
	{
		try
		{

		}
		catch (Exception e)
		{
			Snackbar.Add(e.Message, Severity.Error);
		}
	}

	async Task DeleteConfirmIncomeHistory(IncomeHistory incomeHistory)
	{
		bool? confirmed = await DialogService.ShowMessageBox(
			"Warning", $"Permanently Delete {incomeHistory.IncomeName} : {incomeHistory.IncomeDate.ToShortDateString()}?",
			yesText: "Delete", cancelText: "Cancel");

		if (confirmed == true) { await DeleteIncomeHistoryAsync(incomeHistory); }
	}

	async Task DeleteIncomeHistoryAsync(IncomeHistory income)
	{
		try
		{

		}
		catch (Exception e)
		{
			Snackbar.Add(e.Message, Severity.Error);
		}
	}

	// Button methods

	void CancelExpenseHistory()
	{
		HideExpenseHistoryForm();
		expenseHistory = GetNewExpenseHistory();
	}

	void TurnOnExpenseHistory()
	{
		HideIncomeHistoryForm();
		ShowExpenseHistoryForm();
	}

	void CancelIncomeHistory()
	{
		HideIncomeHistoryForm();
		incomeHistory = GetNewIncomeHistory();
	}

	void TurnOnIncomeHistory()
	{
		HideExpenseHistoryForm();
		ShowIncomeHistoryForm();
	}

	// Component visibility toggles

	private void ShowExpenseHistoryForm()
	{
		expenseHistoryForm.SetVisible(true);
	}

	private void HideExpenseHistoryForm()
	{
		expenseHistoryForm.SetVisible(false);
	}

	private void ShowIncomeHistoryForm()
	{
		incomeHistoryForm.SetVisible(true);
	}

	private void HideIncomeHistoryForm()
	{
		incomeHistoryForm.SetVisible(false);
	}
}
