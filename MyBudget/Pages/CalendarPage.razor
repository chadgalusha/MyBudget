@page "/calendarpage"
@using MyBudget.Helpers
@using MyBudget.Components
@using MyBudget.Models
@using MyBudget.Services
@inject IHistoryService<ExpenseHistory> expenseHistoryService
@inject IService<ExpenseCategories> expenseCategoryService
@inject ICalendarProcessor calendarProcessor

@if (expenseCategoryList == null)
{
	<div class="spinner-border text-primary"></div>
}
else
{
	<div>
		<div class="budget-calendar">
			<MudToolBar class="calendar-date-bar">
				<MudIconButton Color="Color.Info" Icon="@Icons.Filled.ArrowCircleLeft"></MudIconButton>
				<h3 style="text-align:center;">@GetMonthString(month) @year</h3>
				<MudIconButton Color="Color.Info" Icon="@Icons.Filled.ArrowCircleRight"></MudIconButton>
			</MudToolBar>

			<div class="calendar-container">
				<div class="calendar-header">
					<div>Sunday</div>
					<div>Monday</div>
					<div>Tuesday</div>
					<div>Wednesday</div>
					<div>Thursday</div>
					<div>Friday</div>
					<div>Saturday</div>
				</div>

				<div class="calendar-grid">
					@for (int i = 0; i <= total; i++)
					{
						if (i < startingIndex)
						{
							<div id="notMonthDay"></div>
						}
						else if (i > endingIndex)
						{
							<div id="notMonthDay"></div>
						}
						else
						{
							if (count == today)
							{
								<div id="currentDay">@count</div>
								count++;
							}
							else
							{
								<div id="monthDay">@count</div>
								count++;
							}
						
						}
					}
				</div>
			</div>
		</div>
		<div class="budget-calendar-menu">
			<h4>@GetMonthString(selectedDateTime.Month) @selectedDateTime.Day, @selectedDateTime.Year</h4>
			<ExpenseHistoryForm selectedDate="selectedDateTime" expenseHistory="expenseHistory" expenseCategoryList="expenseCategoryList"/>
		</div>
	</div>
}

@code {

	int total = 41; // inclues 0 for total of 42

	[Inject] ISnackbar Snackbar { get; set; }

	DateTime currentDateTime;
	int year;
	int month;
	int today;
	int startingIndex;
	int endingIndex;
	int count = 1;
	// selectedDateTime for calendar menu
	DateTime selectedDateTime;

	// Model variables
	ExpenseHistory expenseHistory = new();
	List<ExpenseCategories> expenseCategoryList = new();

	protected override async Task OnInitializedAsync()
	{
		currentDateTime = DateTime.Now;
		year = currentDateTime.Year;
		month = currentDateTime.Month;
		today = currentDateTime.Day;
		startingIndex = GetFirstOfMonthStartingIndex();
		endingIndex = startingIndex + GetNumberOfDaysInMonth() - 1;
		selectedDateTime = currentDateTime;

		expenseCategoryList = await expenseCategoryService.GetList();
	}

	int GetFirstOfMonthStartingIndex()
	{
		return calendarProcessor.IntForFirstDayOfMonth(year, month);
	}

	int GetNumberOfDaysInMonth()
	{
		return calendarProcessor.NumberDaysInMonth(year, month);
	}

	string GetMonthString(int month)
	{
		return calendarProcessor.GetMonthString(month);
	}

	void Test()
	{
		
	}
}
