@page "/excelimport"
@using MyBudget.Components
@using System.Text;

@if (expenseCategoryList == null)
{
	<MyBudgetLoadingIndicator />
}
else
{
	<h3 style="text-align:center;">Load incomes / expense from .xslx or .csv</h3>
	<div style="margin-top:5px;margin-bottom:5px;">
		<MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="@(() => TestExcel())" >Select File</MudButton>
		<MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="ClearFile" >Clear Selected File</MudButton>
		<MudText><strong>File Selected:</strong> @selectedFileString</MudText>
	</div>

	// Incomes section
	<div>
		<h5 style="text-align:center;">Incomes</h5>
		<IncomeHistoryAddTable incomeTempHistoryList="tempIncomeHistoryList" />
		@if (tempIncomeHistoryList == null || tempIncomeHistoryList.Count == 0)
		{
			<p class="nodata">No data to show</p>
		}
		<div style="margin-top:5px;margin-bottom:5px;">
			<MudButton Variant="Variant.Filled" Color="Color.Success" Style="float:right;">Submit Incomes</MudButton>
		</div>
	</div>
		
	// Expenses section
	<div style="margin-top: 50px;">
		<h5 style="text-align:center;">Expenses</h5>
		<ExpenseHistoryAddTable expenseCategoryList="expenseCategoryList" expenseTempHistoryList="tempExpenseHistoryList" />
		@if (tempExpenseHistoryList == null || tempExpenseHistoryList.Count == 0)
		{
			<p class="nodata">No data to show</p>
		}
		<div style="margin-top:5px;margin-bottom:5px;">
			<MudButton Variant="Variant.Filled" Color="Color.Success" Style="float:right;">Submit Expenses</MudButton>
		</div>
	</div>
}

@code{
	string testMessage = "hello";

	async void TestExcel()
	{
		try
		{
			var test =  await SelectFile();
			
			//Snackbar.Add($"{test.FullPath}", Severity.Success);

			using (var stream = File.Open(test.FullPath, FileMode.Open, FileAccess.Read))
			{
			//using (var reader = ExcelDataReader.ExcelReaderFactory.CreateReader(stream))
			//{
				//	do
				//	{
				//		while (reader.Read())
				//		{
				//			Snackbar.Add(reader.GetString(1)[..30] + " ");
				//		}
				//	} while (reader.NextResult());
				//}

				using var reader = ExcelDataReader.ExcelReaderFactory.CreateCsvReader(stream, new ExcelDataReader.ExcelReaderConfiguration()
				{ 
					FallbackEncoding = Encoding.GetEncoding(1252),
					AutodetectSeparators = new char[] { ',', ';', '\t', '|', '#' },
					LeaveOpen = false,
					AnalyzeInitialCsvRows = 0
				});

				do
				{
					while (reader.Read())
					{
						//Snackbar.Add(reader.GetString(1)[..30] + " ");
					}
				} while (reader.NextResult());
			}
        }
        catch (Exception e)
        {
            Snackbar.Add($"{e.Message}", Severity.Error);
        }
	}
}
