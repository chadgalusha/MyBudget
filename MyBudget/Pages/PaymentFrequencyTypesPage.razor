@page "/paymentfrequencytypespage"
@using MyBudget.Services
@using MyBudget.Models
@inject ITypeService<PaymentFrequencyTypes> paymentFrequencyTypeService
@inject IJSRuntime jsRuntime

<h3 style="text-align:center">Payment Frequency Types</h3>
<p style="color:red">@Error</p>

@if (paymentFrequencyTypesList == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<MudTable Items="@PaymentFrequencyTypeItems" Striped="true" class="table-styles" Dense="true" Filter="new Func<PaymentFrequencyTypes, bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
		<ToolBarContent>
			<MudText Typo="Typo.h6">Payment Frequency Type</MudText>
			<MudSpacer />
			<MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
		</ToolBarContent>
		<HeaderContent>
			<MudTh>Payment Frequency Type Id</MudTh>
			<MudTh>Payment Frequency Type</MudTh>
			<MudTh></MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="Payment Frequency Type Id">@context.PaymentFrequencyTypeId</MudTd>
			<MudTd DataLabel="Payment Frequency Type">@context.PaymentFrequencyType</MudTd>
			<MudTd>
				<MudIcon Icon="@Icons.TwoTone.Edit" Title="Edit" @onclick="(() => EditRecord(context))" class="mud-table-button" Color="Color.Info" />
				<MudIcon Icon="@Icons.TwoTone.Delete" Title="Delete" @onclick="(() => DeleteConfirm(context))" class="mud-table-button" Color="Color.Error" />
			</MudTd>
		</RowTemplate>
		<PagerContent>
			<MudTablePager />
		</PagerContent>
	</MudTable>

	<div id="add-button">
		<MudButton Variant="Variant.Filled" Color="Color.Success" @onclick="AddNewType">
			Add new Payment Frequency Type
		</MudButton>
	</div>

	@if (ShowPopup)
	{
		<div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Edit Payment Frequency Type</h3>
                        <!-- Button to close the popup -->
                        <button type="button" class="close"
                        @onclick="ClosePopup">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <!-- Edit form for the current payment frequency type -->
                    <div class="modal-body">
                        <input class="form-control" type="number" disabled="disabled"
                       @bind="paymentFrequencyType.PaymentFrequencyTypeId" />
                        <input class="form-control" type="text"
                       placeholder="New Type"
                       @bind="paymentFrequencyType.PaymentFrequencyType" />
                        <br />
						<!-- Button to save the payment frequency type -->
                        <button class="btn btn-success"
                        @onclick="SaveRecord">
                            Save
                        </button>&nbsp;
                        <!-- Only show delete button if not a new record -->
                        @if (paymentFrequencyType.PaymentFrequencyTypeId > 0)
                        {
							<!-- Button to delete the payment frequency type -->
                            <button class="btn btn-danger"
                        @onclick="() => DeleteRecord(paymentFrequencyType)">
                                Delete
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
	}
}

@code 
{
	string Error = "";
	List<PaymentFrequencyTypes> paymentFrequencyTypesList = new();
	PaymentFrequencyTypes paymentFrequencyType = new PaymentFrequencyTypes();
	bool ShowPopup = false;

	private string searchString1 = "";
	private PaymentFrequencyTypes selectedItem1 = null;
	private HashSet<PaymentFrequencyTypes> selectedItems = new();
	private IEnumerable<PaymentFrequencyTypes> PaymentFrequencyTypeItems = new List<PaymentFrequencyTypes>();

	protected override async Task OnInitializedAsync()
	{
		paymentFrequencyTypesList = await paymentFrequencyTypeService.GetList();
		PaymentFrequencyTypeItems = paymentFrequencyTypesList;
	}

	void ClosePopup()
	{
		ShowPopup = false;
	}

	void AddNewType()
	{
		paymentFrequencyType = new PaymentFrequencyTypes();
		paymentFrequencyType.PaymentFrequencyTypeId = 0;
		ShowPopup = true;
	}

	void EditRecord(PaymentFrequencyTypes type)
	{
		paymentFrequencyType = type;
		ShowPopup = true;
	}

	async Task SaveRecord()
	{
		ShowPopup = false;
		Error = "";

		try
		{
			if (paymentFrequencyType.PaymentFrequencyTypeId == 0)
			{

			}
			else
			{
				var updatedRecord = await paymentFrequencyTypeService.UpdateRecord(paymentFrequencyType);
				if (updatedRecord.PaymentFrequencyTypeId == -1)
				{
					Error = "Duplicate Payment Frequency Type, please try again";
					paymentFrequencyTypesList = await paymentFrequencyTypeService.GetList();
				}
			}
		}
		catch (Exception e)
		{
			Error = e.Message;
		}
	}

	async Task DeleteConfirm(PaymentFrequencyTypes type)
	{
		bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Record?");
		if (confirmed)
		{
			await DeleteRecord(type);
		}
	}

	async Task DeleteRecord(PaymentFrequencyTypes type)
	{
		ShowPopup = false;
		Error = "";
	}

	// Search Functions

	private bool FilterFunc1(PaymentFrequencyTypes type) => FilterFunc(type, searchString1);

	private bool FilterFunc(PaymentFrequencyTypes type, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (type.PaymentFrequencyType.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}
}
