@page "/incomespage"
@using MyBudget.Services
@using MyBudget.Models
@using MyBudget.Helpers
@inject IService<Incomes> incomeService
@inject ITypeService<PaymentFrequencyTypes> paymentFrequencyTypeService
@inject ITypeService<IncomeTypes> incomeTypeService
@inject IJSRuntime jsRuntime

<h3 style="text-align:center">Incomes</h3>
<p style="color:red">@Error</p>

@if (incomeList == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<MudTable Items="@IncomeItems" Striped="true" class="table-styles" Dense="true" Filter="new Func<Incomes, bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
		<ToolBarContent>
			<MudText Typo="Typo.h6">Incomes</MudText>
			<MudSpacer />
			<MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
		</ToolBarContent>
		<HeaderContent>
			<MudTh Style="display:none;">Income Id</MudTh>
			<MudTh>Income Name</MudTh>
			<MudTh>Income Type Id</MudTh>
			<MudTh>Payment Frequency Type Id</MudTh>
			<MudTh>Income Amount</MudTh>
			<MudTh>Income Initial Date</MudTh>
			<MudTh></MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="Income Id" Style="display:none">@context.IncomeId</MudTd>
			<MudTd DataLabel="Income Name">@context.IncomeName</MudTd>
			<MudTd DataLabel="Income Type Id">@GetIncomeTypeName(context.IncomeTypeId, incomeTypesList)</MudTd>
			<MudTd DataLabel="Payment Frequency Type Id">@GetPaymentFrequencyTypeName(context.PaymentFrequencyTypeId, paymentFrequencyTypesList)</MudTd>
			<MudTd DataLabel="Income Amount">@context.IncomeAmount.ToString("0.00")</MudTd>
			<MudTd DataLabel="Income Initial Date">@context.InitialIncomeDate.ToShortDateString()</MudTd>
			<MudTd>
				<MudIcon Icon="@Icons.TwoTone.Edit" Title="Edit" @onclick="(() => EditRecord(context))" class="mud-table-button" Color="Color.Info" />
				<MudIcon Icon="@Icons.TwoTone.Delete" Title="Delete" @onclick="(() => DeleteConfirm(context))" class="mud-table-button" Color="Color.Error" />
			</MudTd>
		</RowTemplate>
		<PagerContent>
			<MudTablePager />
		</PagerContent>
	</MudTable>

	<div id="add-button">
		<MudButton Variant="Variant.Filled" Color="Color.Success" @onclick="AddNewRecord">
			Add New Income
		</MudButton>
	</div>

	@if (ShowPopup)
	{
		<div class="modal" tabindex="-1" style="display:block" role="dialog">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h3 class="modal-title">Edit Income</h3>
						<!-- Button to close the popup -->
						<button type="button" class="close"
						@onclick="ClosePopup">
							<span aria-hidden="true">X</span>
						</button>
					</div>
					<!-- Edit form for the current income -->
					<div class="modal-body">
						<label for="incomeid">Income Id: </label>
						<input class="form-control" type="number" disabled="disabled"
					   @bind="income.IncomeId" id="incomeid" />
					   <label for="incomename">Income Name: </label>
						<input class="form-control" type="text"
					   placeholder="Income Name"
					   @bind="income.IncomeName" id="incomename"/>

					   <label for="incometype">Income Type: </label>
					   <select class="form-select" title="Income Type Required" @bind="income.IncomeTypeId" id="incometype">
						   <option value="Select" disabled="disabled">Choose Income Type</option>
						   @foreach (var incomeType in incomeTypesList)
							{
								<option value="@incomeType.IncomeTypeId">@incomeType.IncomeType</option>
							}
					   </select>

					   <label for="paymentfrequency">Payment Frequency: </label>
					   <select class="form-select" title="Payment Frequency Required" @bind="income.PaymentFrequencyTypeId" id="paymentfrequency">
						   <option value="Select" disabled="disabled">Choose Payment Frequency</option>
						   @foreach (var type in paymentFrequencyTypesList)
							{
								<option value="@type.PaymentFrequencyTypeId">@type.PaymentFrequencyType</option>
							}
					   </select>

					   <label for="incomeamount">Income Amount: </label>
						<input class="form-control" type="number"
					   placeholder="Income Amount"
					   @bind="income.IncomeAmount" id="incomeamount" min="0" />
					   <label for="incomedate">Income Date:</label>
						<input class="form-control" type="date"
					   placeholder="Income Date"
					   @bind="income.InitialIncomeDate" id="incomedate" />
						<br />
						<!-- Button to save the income -->
						<button class="btn btn-success"
						@onclick="SaveRecord">
							Save
						</button>&nbsp;
						<!-- Only show delete button if not a new record -->
						@if (income.IncomeId > 0)
						{
							<!-- Button to delete the income -->
							<button class="btn btn-danger"
						@onclick="() => DeleteRecord(income)">
								Delete
							</button>
						}
					</div>
				</div>
			</div>
		</div>
	}
}

@code {
	string Error = "";
	List<Incomes> incomeList = new();
	List<IncomeTypes> incomeTypesList = new();
	List<PaymentFrequencyTypes> paymentFrequencyTypesList = new();
	Incomes income = new();
	bool ShowPopup = false;

	private string searchString1 = "";
	private Incomes selectedItem1 = null;
	private HashSet<Incomes> selectedItems = new();
	private IEnumerable<Incomes> IncomeItems = new List<Incomes>();

	protected override async Task OnInitializedAsync()
	{
		incomeList = await incomeService.GetList();
		IncomeItems = incomeList;
		incomeTypesList = await incomeTypeService.GetList();
		paymentFrequencyTypesList = await paymentFrequencyTypeService.GetList();
	}

	void ClosePopup()
	{
		ShowPopup = false;
	}

	void AddNewRecord()
	{
		income = new Incomes()
			{
				IncomeId = 0,
				InitialIncomeDate = DateTime.Today.Date
			};
		ShowPopup = true;
	}

	void EditRecord(Incomes incomeToEdit)
	{
		income = incomeToEdit;
		ShowPopup = true;
	}

	async Task SaveRecord()
	{
		ShowPopup = false;
		Error = "";

		try
		{
			if (income.IncomeId == 0)
			{
				Incomes newIncome = new()
				{
					IncomeName = income.IncomeName,
					IncomeTypeId = income.IncomeTypeId,
					PaymentFrequencyTypeId = income.PaymentFrequencyTypeId,
					IncomeAmount = income.IncomeAmount,
					InitialIncomeDate = income.InitialIncomeDate
				};

				var createdIncome = await incomeService.CreateRecord(newIncome);

				if (createdIncome.IncomeName == null || createdIncome.IncomeName == "")
				{
					Error = "Duplicate Income name, please try again";
				}
				else
				{
					incomeList = await incomeService.GetList();
					IncomeItems = incomeList;
				}
			}
			else
			{
				var updatedRecord = await incomeService.UpdateRecord(income);
				if (updatedRecord.IncomeId == -1)
				{
					Error = "Name already used, please try again";
					incomeList = await incomeService.GetList();
				}
			}
		}
		catch (Exception e)
		{
			Error = e.Message;
		}
	}

	async Task DeleteConfirm(Incomes income)
	{
		bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Record?");
		if (confirmed)
		{
			await DeleteRecord(income);
		}
	}

	async Task DeleteRecord(Incomes income)
	{
		ShowPopup = false;
		Error = "";

		try
		{
			await incomeService.DeleteRecord(income);
			incomeList = await incomeService.GetList();
			IncomeItems = incomeList;
		}
		catch (Exception e)
		{
			Error = e.Message;
		}
	}

	// helper methods

	string GetIncomeTypeName(int id, List<IncomeTypes> incomeTypeList)
	{
		return ItemFromList.GetNameFromTypeList(id, incomeTypeList);
	}

	string GetPaymentFrequencyTypeName(int id, List<PaymentFrequencyTypes> paymentFrequencyTypeList)
	{
		return ItemFromList.GetNameFromTypeList(id, paymentFrequencyTypeList);
	}

	// Search Functions

	private bool FilterFunc1(Incomes income) => FilterFunc(income, searchString1);

	private bool FilterFunc(Incomes income, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (income.IncomeName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if ($"{income.IncomeAmount.ToString("0.00")}".Contains(searchString))
			return true;
		if ($"{income.IncomeTypeId} {income.PaymentFrequencyTypeId}".Contains(searchString))
			return true;
		if ($"{income.InitialIncomeDate.ToShortDateString()}".Contains(searchString))
			return true;
		return false;
	}
}
