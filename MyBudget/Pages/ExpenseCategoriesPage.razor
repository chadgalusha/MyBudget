@page "/expensecategoriespage"
@using MyBudget.Services
@using MyBudget.Models
@inject IService<ExpenseCategories> expenseCategoriesService
@inject IJSRuntime jsRuntime

<h3 style="text-align:center">Expense Categories</h3>
<p style="color:red">@Error</p>

@if (expenseCategoriesList == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<MudTable Items="@ExpenseCategoryItems" Striped="true" id="table-styles" Filter="new Func<ExpenseCategories,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
		<ToolBarContent>
			<MudText Typo="Typo.h6">Expense Categories</MudText>
			<MudSpacer />
			<MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
		</ToolBarContent>
		<HeaderContent>
			<MudTh>Expense Category Id</MudTh>
			<MudTh>Expense Category Name</MudTh>
			<MudTh>Expense Category Desc</MudTh>
			<MudTh></MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="Expense Category Id">@context.ExpenseCategoryId</MudTd>
			<MudTd DataLabel="Expense Category Name">@context.ExpenseCategoryName</MudTd>
			<MudTd DataLabel="Expense Category Desc">@context.ExpenseCategoryDescription</MudTd>
			<MudTd>
				<MudButton Variant="Variant.Filled" Color="Color.Info"
				@onclick="(() => EditRecord(context))">
					Edit
				</MudButton>
			</MudTd>
		</RowTemplate>
		<PagerContent>
			<MudTablePager />
		</PagerContent>
	</MudTable>

	<div id="add-button">
		<MudButton Variant="Variant.Filled" Color="Color.Success" @onclick="AddNewRecord">
			Add new expense category
		</MudButton>
	</div>

	@if (ShowPopup)
	{
		<div class="modal" tabindex="1" style="display:block" role="dialog">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h3 class="modal-title">Edit Expense Category</h3>
						<!-- Button to close the popup -->
						<button type="button" class="close"
						@onclick="ClosePopup">
							<span aria-hidden="true">X</span>
						</button>
					</div>
					<!-- Edit form for current expense category -->
					<div class="modal-body">
						<label for="expensecategoryid">Expense Category Id: </label>
						<input class="form-control" type="number" disabled="disabled"
					   @bind="expenseCategory.ExpenseCategoryId" id="expensecategoryid" />
						<label for="expensecategoryname">Expense Category Name: </label>
						<input class="form-control" type="text"
					   placeholder="Expense Category Name"
					   @bind="expenseCategory.ExpenseCategoryName" id="expensecategoryname" />
						<label for="expensecategorydesc">Expense Category Description: </label>
						<input class="form-control" type="text"
					   placeholder="Expense Category Name"
					   @bind="expenseCategory.ExpenseCategoryDescription" id="expensecategorydesc" />

						<br />
						<!-- Button to save the expense category -->
						<button class="btn btn-success"
						@onclick="SaveRecord">
							Save
						</button>&nbsp;
						<!-- Only show delete button if not a new record -->
						@if (expenseCategory.ExpenseCategoryId > 0)
						{
							<!-- Button to delete the expense category -->
							<button class="btn btn-danger"
						@onclick="DeleteConfirm">
								Delete
							</button>
						}
					</div>
				</div>
			</div>
		</div>
	}
}

@code {

	string Error = "";
	bool ShowPopup = false;
	List<ExpenseCategories> expenseCategoriesList = new();
	ExpenseCategories expenseCategory = new();
	private string searchString1 = "";
	private ExpenseCategories selectedItem1 = null;
	private HashSet<ExpenseCategories> selectedItems = new();
	private IEnumerable<ExpenseCategories> ExpenseCategoryItems = new List<ExpenseCategories>();

	protected override async Task OnInitializedAsync()
	{
		ExpenseCategoryItems = await expenseCategoriesService.GetList();
	}

	void ClosePopup()
	{
		ShowPopup = false;
	}

	void AddNewRecord()
	{
		expenseCategory = new();
		expenseCategory.ExpenseCategoryId = 0;
		ShowPopup = true;
	}

	void EditRecord(ExpenseCategories editExpenseCategory)
	{
		expenseCategory = editExpenseCategory;
		ShowPopup = true;
	}

	void SaveRecord()
	{
		ShowPopup = false;
		Error = "";
	}

	async Task DeleteConfirm()
	{
		bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Record?");
		if (confirmed) { await DeleteRecord(); }
	}

	async Task DeleteRecord()
	{
		ShowPopup = false;
		Error = "";
	}

	// Search Functions

	private bool FilterFunc1(ExpenseCategories exc) => FilterFunc(exc, searchString1);

	private bool FilterFunc(ExpenseCategories exc, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (exc.ExpenseCategoryName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if ($"{exc.ExpenseCategoryDescription}".Contains(searchString))
			return true;
		return false;
	}
}
