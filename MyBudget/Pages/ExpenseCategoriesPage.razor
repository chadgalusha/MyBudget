@page "/expensecategoriespage"
@using MyBudget.Services
@using MyBudget.Models
@inject IService<ExpenseCategories> expenseCategoriesService

<h3 style="text-align:center">Expense Categories</h3>

@if (expenseCategoriesList == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<MudTable Items="@ExpenseCategoryItems" Striped="true" class="table-styles" Filter="new Func<ExpenseCategories,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1" Dense="true">
		<ToolBarContent>
			<MudText Typo="Typo.h6">Expense Categories</MudText>
			<MudSpacer />
			<MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
		</ToolBarContent>
		<HeaderContent>
			<MudTh>Expense Category Id</MudTh>
			<MudTh>Expense Category Name</MudTh>
			<MudTh>Expense Category Desc</MudTh>
			<MudTh></MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="Expense Category Id">@context.ExpenseCategoryId</MudTd>
			<MudTd DataLabel="Expense Category Name">@context.ExpenseCategoryName</MudTd>
			<MudTd DataLabel="Expense Category Desc">@context.ExpenseCategoryDescription</MudTd>
			<MudTd>
				<MudIcon Icon="@Icons.TwoTone.Edit" Title="Edit" @onclick="() => EditRecord(context)" class="mud-table-button" Color="Color.Info" />
				<MudIcon Icon="@Icons.TwoTone.Delete" Title="Delete" @onclick="() => DeleteConfirm(context)" class="mud-table-button" Color="Color.Error" />
			</MudTd>
		</RowTemplate>
		<PagerContent>
			<MudTablePager />
		</PagerContent>
	</MudTable>

	<div id="add-button">
		<MudButton Variant="Variant.Filled" Color="Color.Success" @onclick="AddNewRecord">
			Add new expense category
		</MudButton>
	</div>

	@if (ShowPopup)
	{
		<div class="modal" tabindex="1" style="display:block" role="dialog">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h3 class="modal-title">Edit Expense Category</h3>
						<!-- Button to close the popup -->
						<button type="button" class="close"
						@onclick="ClosePopup">
							<span aria-hidden="true">X</span>
						</button>
					</div>
					<!-- Edit form for current expense category -->
					<div class="modal-body">
						<label for="expensecategoryid">Expense Category Id: </label>
						<input class="form-control" type="number" disabled="disabled"
					   @bind="expenseCategory.ExpenseCategoryId" id="expensecategoryid" />
						<label for="expensecategoryname">Expense Category Name: </label>
						<input class="form-control" type="text"
					   placeholder="Expense Category Name"
					   @bind="expenseCategory.ExpenseCategoryName" id="expensecategoryname" />
						<label for="expensecategorydesc">Expense Category Description: </label>
						<input class="form-control" type="text"
					   placeholder="Expense Category Name"
					   @bind="expenseCategory.ExpenseCategoryDescription" id="expensecategorydesc" />

						<br />
						<!-- Button to save the expense category -->
						<button class="btn btn-success"
						@onclick="SaveRecord">
							Save
						</button>&nbsp;
						<!-- Only show delete button if not a new record -->
						@if (expenseCategory.ExpenseCategoryId > 0)
						{
							<!-- Button to delete the expense category -->
							<button class="btn btn-danger"
						@onclick="() => DeleteConfirm(expenseCategory)">
								Delete
							</button>
						}
					</div>
				</div>
			</div>
		</div>
	}
}

@code {

	bool ShowPopup = false;
	List<ExpenseCategories> expenseCategoriesList = new();
	ExpenseCategories expenseCategory = new();
	private string searchString1 = "";
	private ExpenseCategories selectedItem1 = null;
	private HashSet<ExpenseCategories> selectedItems = new();
	private IEnumerable<ExpenseCategories> ExpenseCategoryItems = new List<ExpenseCategories>();

	[Inject] IDialogService DialogService { get; set; }
	[Inject] ISnackbar Snackbar { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await LoadData();
	}

	async Task LoadData()
	{
		expenseCategoriesList = await expenseCategoriesService.GetList();
		ExpenseCategoryItems = expenseCategoriesList; 
	}

	void ClosePopup()
	{
		ShowPopup = false;
	}

	void AddNewRecord()
	{
		expenseCategory = new();
		expenseCategory.ExpenseCategoryId = 0;
		ShowPopup = true;
	}

	void EditRecord(ExpenseCategories editExpenseCategory)
	{
		expenseCategory = editExpenseCategory;
		ShowPopup = true;
	}

	async void SaveRecord()
	{
		ShowPopup = false;

		try
		{
			if (expenseCategory.ExpenseCategoryId == 0)
			{
				ExpenseCategories newExpenseCategory = new()
				{
					ExpenseCategoryName = expenseCategory.ExpenseCategoryName,
					ExpenseCategoryDescription = expenseCategory.ExpenseCategoryDescription
				};

				var createdExpenseCategory = await expenseCategoriesService.CreateRecord(newExpenseCategory);
				CreateResultProcessor(createdExpenseCategory);
			}
			else
			{
				var updatedRecord = await expenseCategoriesService.UpdateRecord(expenseCategory);
				UpdateResultProcessor(updatedRecord);
			}
		}
		catch (Exception e)
		{
			CatchErrorMessage(e);
		}
	}

	async Task DeleteConfirm(ExpenseCategories expenseCategory)
	{
		bool? confirmed = await DialogService.ShowMessageBox(
			"Warning", $"Permanently Delete {expenseCategory.ExpenseCategoryName}?",
			yesText: "Delete", cancelText: "Cancel");

		if (confirmed == true) { await DeleteRecord(expenseCategory); }
	}

	async Task DeleteRecord(ExpenseCategories expenseCategory)
	{
		ShowPopup = false;

		try
		{
			var deleteExpenseCategory = await expenseCategoriesService.DeleteRecord(expenseCategory);
			DeleteResultProcessor(deleteExpenseCategory);
		}
		catch (Exception e)
		{
			CatchErrorMessage(e);
		}
	}

	// CRUD help methods

	void ProcessingErrorMessage() { Snackbar.Add("Error processing record, please try again", Severity.Error); }
	void DuplicateNameMessage() { Snackbar.Add("Duplicate Expense Category name, please try again", Severity.Error); }
	void TypeInUseMessage() { Snackbar.Add("Expense Category in use by 1 or more Expense Histories", Severity.Error); }
	void CatchErrorMessage(Exception e) { Snackbar.Add($"{e.Message}", Severity.Error); }

	void CreateResultProcessor(ExpenseCategories category)
	{
		switch (category.ExpenseCategoryId)
		{
			case 0:
				ProcessingErrorMessage();
				break;
			case -1:
				DuplicateNameMessage();
				break;
			default:
				expenseCategoriesList.Add(category);
				ExpenseCategoryItems = expenseCategoriesList;
				Snackbar.Add("Expense Category Added", Severity.Success);
				break;
		}
	}

	async void UpdateResultProcessor(ExpenseCategories category)
	{
		if (category.ExpenseCategoryId == -1)
		{
			DuplicateNameMessage();
			await LoadData();
			return;
		}
		if (category.ExpenseCategoryId == 0)
		{
			ProcessingErrorMessage();
			await LoadData();
		}
	}

	void DeleteResultProcessor(ExpenseCategories category)
	{
		switch (category.ExpenseCategoryId)
		{
			case 0:
				ProcessingErrorMessage();
				break;
			case -1:
				TypeInUseMessage();
				break;
			default:
				expenseCategoriesList.Remove(category);
				ExpenseCategoryItems = expenseCategoriesList;
				Snackbar.Add("Expense Category Deleted", Severity.Success);
				break;
		}
	}

	// Search methods

	private bool FilterFunc1(ExpenseCategories exc) => FilterFunc(exc, searchString1);

	private bool FilterFunc(ExpenseCategories exc, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (exc.ExpenseCategoryName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if ($"{exc.ExpenseCategoryDescription}".Contains(searchString))
			return true;
		return false;
	}
}
