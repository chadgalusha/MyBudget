@page "/bankaccounttypespage"
@using MyBudget.Services
@using MyBudget.Models
@using MyBudget.Components
@inject ITypeService<BankAccountTypes> bankAccountTypesService

<h3 style="text-align:center">Bank Account Types</h3>

@if (bankAccountTypesList == null)
{
	<MyBudgetLoadingIndicator />
}
else
{
	<MudTable Items="@BankAccountTypeItems" Striped="true" class="table-styles" Dense="true" Filter="new Func<BankAccountTypes, bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
		<ToolBarContent>
			<MudText Typo="Typo.h6">Expense Type</MudText>
			<MudSpacer />
			<MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
		</ToolBarContent>
		<HeaderContent>
			<MudTh>Bank Account Type Id</MudTh>
			<MudTh>Bank Account Type</MudTh>
			<MudTh></MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="Bank Account Type Id">@context.BankAccountTypeId</MudTd>
			<MudTd DataLabel="Bank Account Type">@context.BankAccountType</MudTd>
			<MudTd>
				<MudIcon Icon="@Icons.TwoTone.Edit" Title="Edit" @onclick="() => EditRecord(context)" class="mud-table-button" Color="Color.Info" />
				<MudIcon Icon="@Icons.TwoTone.Delete" Title="Delete" @onclick="() => DeleteConfirm(context)" class="mud-table-button" Color="Color.Error" />
			</MudTd>
		</RowTemplate>
		<PagerContent>
			<MudTablePager />
		</PagerContent>
	</MudTable>

	<div id="add-button">
		<MudButton Variant="Variant.Filled" Color="Color.Success" @onclick="AddNewRecord">
			Add New Bank Account Type
		</MudButton>
	</div>

	@if (ShowPopup)
	{
		<div class="modal" tabindex="-1" style="display:block" role="dialog">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h3 class="modal-title">Edit Bank Account Type</h3>
						<!-- Button to close the popup -->
						<button type="button" class="close"
						@onclick="ClosePopup">
							<span aria-hidden="true">X</span>
						</button>
					</div>
					<!-- Edit form for the current bank account type -->
					<div class="modal-body">
						<input class="form-control" type="number" disabled="disabled"
					   @bind="bankAccountType.BankAccountTypeId" />
						<input class="form-control" type="text"
					   placeholder="New Type"
					   @bind="bankAccountType.BankAccountType" />
						<br />
						<!-- Button to save the bank account type -->
						<button class="btn btn-success"
						@onclick="SaveRecord">
							Save
						</button>&nbsp;
						<!-- Only show delete button if not a new record -->
						@if (bankAccountType.BankAccountTypeId > 0)
						{
							<!-- Button to delete the bank account type -->
							<button class="btn btn-danger"
						@onclick="() => DeleteConfirm(bankAccountType)">
								Delete
							</button>
						}
					</div>
				</div>
			</div>
		</div>
	}
}

@code 
{
	List<BankAccountTypes> bankAccountTypesList;
	BankAccountTypes bankAccountType = new();
	bool ShowPopup = false;

	private string searchString1 = "";
	private BankAccountTypes selectedItem1 = null;
	private HashSet<BankAccountTypes> selectedItems = new();
	private IEnumerable<BankAccountTypes> BankAccountTypeItems = new List<BankAccountTypes>();

	[Inject] IDialogService DialogService { get; set; }
	[Inject] ISnackbar Snackbar { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await LoadData();
	}

	async Task LoadData()
	{
		bankAccountTypesList = await bankAccountTypesService.GetList();
		BankAccountTypeItems = bankAccountTypesList;
	}

	void ClosePopup()
	{
		ShowPopup = false;
	}

	void AddNewRecord()
	{
		bankAccountType = new BankAccountTypes();
		bankAccountType.BankAccountTypeId = 0;
		ShowPopup = true;
	}

	void EditRecord(BankAccountTypes type)
	{
		bankAccountType = type;
		ShowPopup = true;
	}

	async Task SaveRecord()
	{
		ShowPopup = false;

		try
		{
			if (bankAccountType.BankAccountTypeId == 0)
			{
				BankAccountTypes newBankAccountType = new()
				{
					BankAccountType = bankAccountType.BankAccountType
				};

				var createdBankAccountType = await bankAccountTypesService.CreateRecord(newBankAccountType);
				CreateResultProcessor(createdBankAccountType);
			}
			else
			{
				var updatedRecord = await bankAccountTypesService.UpdateRecord(bankAccountType);
				UpdateResultProcessor(updatedRecord);
			}
		}
		catch (Exception e)
		{
			CatchErrorMessage(e);
		}
	}

	async Task DeleteConfirm(BankAccountTypes type)
	{
		bool? confirmed = await DialogService.ShowMessageBox(
			"Warning", $"Permanently Delete {type.BankAccountType}?",
			yesText: "Delete", cancelText: "Cancel");

		if (confirmed == true) { await DeleteRecord(type); }
	}

	async Task DeleteRecord(BankAccountTypes type)
	{
		ShowPopup = false;

		try
		{
			var deleteBankAccountType = await bankAccountTypesService.DeleteRecord(type);
			DeleteResultProcessor(deleteBankAccountType);
		}
		catch (Exception e)
		{
			CatchErrorMessage(e);
		}
	}

	// CRUD help methods

	void ProcessingErrorMessage() { Snackbar.Add("Error processing record, please try again", Severity.Error); }
	void DuplicateNameMessage() { Snackbar.Add("Duplicate Bank Account Type name, please try again", Severity.Error); }
	void TypeInUseMessage() { Snackbar.Add("Bank Account Type in use by 1 or more Bank Accounts", Severity.Error); }
	void CatchErrorMessage(Exception e) { Snackbar.Add($"{e.Message}", Severity.Error); }

	void CreateResultProcessor(BankAccountTypes type)
	{
		switch (type.BankAccountTypeId)
		{
			case 0:
				ProcessingErrorMessage();
				break;
			case -1:
				DuplicateNameMessage();
				break;
			default:
				bankAccountTypesList.Add(type);
				BankAccountTypeItems = bankAccountTypesList;
				Snackbar.Add("Bank Account Type Added", Severity.Success);
				break;
		}
	}

	async void UpdateResultProcessor(BankAccountTypes type)
	{
		if (type.BankAccountTypeId == -1)
		{
			DuplicateNameMessage();
			await LoadData();
			return;
		}
		if (type.BankAccountTypeId == 0)
		{
			ProcessingErrorMessage();
			await LoadData();
		}
	}

	void DeleteResultProcessor(BankAccountTypes type)
	{
		switch (type.BankAccountTypeId)
		{
			case 0:
				ProcessingErrorMessage();
				break;
			case -1:
				TypeInUseMessage();
				break;
			default:
				bankAccountTypesList.Remove(type);
				BankAccountTypeItems = bankAccountTypesList;
				Snackbar.Add("Bank Account Type Deleted", Severity.Success);
				break;
		}
	}

	// Search methods

	private bool FilterFunc1(BankAccountTypes bat) => FilterFunc(bat, searchString1);

	private bool FilterFunc(BankAccountTypes bat, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (bat.BankAccountType.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}
}
