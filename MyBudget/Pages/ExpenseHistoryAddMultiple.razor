@page "/expensehistoryaddmultiple"
@using MyBudget.Components
@using MyBudget.Models
@using MyBudget.Services
@using MyBudget.Helpers
@using System.Globalization
@inject IHistoryService<ExpenseHistory> expenseHistoryService
@inject IService<ExpenseCategories> expenseCategoryService

<h3 style="text-align:center;">Add Multiple Expense Histories</h3>
<div style="margin-top:5px;margin-bottom:5px;">
	<LinkButton _href="/expensehistorypage" _text="Back to Expense History"></LinkButton>
	<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="AddRow">Add Row</MudButton>
	<MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="DeleteRow">Delete Row</MudButton>
	<MudButton Variant="Variant.Filled" Color="Color.Success" @onclick="ProcessList" style="float:right;">Submit</MudButton>
</div>

<table class="table table-striped table-bordered table-styles">
	<thead>
		<tr>
			<th>Row</th>
			<th>Expense Name</th>
			<th>Amount Paid</th>
			<th>Expense Date</th>
			<th>Expense Category</th>
			<th></th>
		</tr>
	</thead>
	<tbody>
		@foreach (var expense in expenseHistoryList)
		{
		<tr>
			<td><input @bind="expense.ExpenseHistoryId" type="number" disabled="disabled" class="border-1" /></td>
			<td><input type="text" @bind="expense.ExpenseName" maxlength="20" class="border-1" /></td>
			<td><input type="number" @bind="expense.AmountPaid" min="0" max="999999999" class="border-1" /></td>
			<td><input type="date" @bind="expense.ExpenseDate" class="border-1" /></td>
			<td>
				<select @bind="expense.ExpenseCategoryId" class="border-1">
					@foreach (var category in expenseCategoryList)
					{
						<option value="@category.ExpenseCategoryId">@category.ExpenseCategoryName</option>
					}
				</select>
			</td>
			<td>
				<MudIcon Icon="@Icons.Filled.DeleteOutline" Color="Color.Error" Title="delete"
				@onclick="() => RemoveElement(expense.ExpenseHistoryId)" class="mud-table-button" style="text-align:center;" />
			</td>
		</tr>
		}
	</tbody>
</table>

<MudTable Items="@expenseHistoryList">
	<HeaderContent>
		<MudTh></MudTh>
		<MudTh></MudTh>
		<MudTh></MudTh>
		<MudTh></MudTh>
		<MudTh></MudTh>
		<MudTh></MudTh>
	</HeaderContent>
	<RowTemplate>

	</RowTemplate>
</MudTable>

<div style="margin-top:5px;margin-bottom:5px;">
	<LinkButton _href="/expensehistorypage" _text="Back to Expense History"></LinkButton>
	<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="AddRow">Add Row</MudButton>
	<MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="DeleteRow">Delete Row</MudButton>
	<MudButton Variant="Variant.Filled" Color="Color.Success" @onclick="ProcessList" style="float:right;">Submit</MudButton>
</div>

@code {

	ExpenseHistory expenseHistory = new();
	List<ExpenseHistory> expenseHistoryList = new();
	List<ExpenseCategories> expenseCategoryList = new();

	[Inject] ISnackbar Snackbar { get; set; }

	protected override async Task OnInitializedAsync()
	{
		expenseCategoryList = await expenseCategoryService.GetList();
		expenseHistoryList.Add(GetInitialExpenseHistory());
	}

	void AddRow()
	{
		if (expenseHistoryList.Count >= 25)
		{
			Snackbar.Add("Max of 25 new records", Severity.Info);
			return;
		}

		expenseHistoryList.Add(GetNextRow());
	}

	void DeleteRow()
	{
		var lastIndex = expenseHistoryList.LastOrDefault();
		expenseHistoryList.Remove(lastIndex);
	}

	void RemoveElement(int id)
	{
		var element = expenseHistoryList.Where(e => e.ExpenseHistoryId == id).First();
		expenseHistoryList.Remove(element);
		ReIndexList();
	}

	ExpenseHistory GetInitialExpenseHistory()
	{
		return new() { ExpenseHistoryId = 1, ExpenseDate = DateTime.Now };
	}

	ExpenseHistory GetNextRow()
	{
		return new() { ExpenseHistoryId = NextId(), ExpenseDate = DateTime.Now };
	}

	int NextId()
	{
		return expenseHistoryList.Count + 1;
	}

	void ReIndexList()
	{
		int currentIndex = 1;

		foreach (var expense in expenseHistoryList)
		{
			expense.ExpenseHistoryId = currentIndex;
			currentIndex++;
		}
	}

	// Save methods

	async Task ProcessList()
	{
		int result = CheckListForIssues();
		if (result != 0)
		{
			Snackbar.Add($"Issue with row {result}. Name must not be empty/blank. Date year must be greater than 1999", Severity.Error);
			return;
		}

		foreach (var expense in expenseHistoryList)
		{
			await SaveRecord(expense);
		}

		ClearListAndSuccessMessage();
	}

	void ClearListAndSuccessMessage()
	{
		expenseHistoryList.Clear();
		expenseHistoryList.Add(GetInitialExpenseHistory());
		Snackbar.Add("New Expense Histories Added", Severity.Success);
	}

	int CheckListForIssues()
	{
		foreach (var expense in expenseHistoryList)
		{
			if (string.IsNullOrWhiteSpace(expense.ExpenseName))
			{
				return expense.ExpenseHistoryId;
			}
			if (expense.ExpenseDate.Year < 2000)
			{
				return expense.ExpenseHistoryId;
			}
		}
		return 0;
	}

	async Task SaveRecord(ExpenseHistory expense)
	{
		try
		{
			ExpenseHistory newExpenseHistory = GetNewModel(expense);
			await expenseHistoryService.CreateRecord(newExpenseHistory);
		}
		catch (Exception e)
		{
			Snackbar.Add(e.Message, Severity.Error);
		}
	}

	ExpenseHistory GetNewModel(ExpenseHistory expense)
	{
		return new()
		{
			ExpenseName = expense.ExpenseName,
			AmountPaid = expense.AmountPaid,
			ExpenseDate = expense.ExpenseDate,
			ExpenseCategoryId = expense.ExpenseCategoryId
		};
	}
}
