@page "/expensehistoryaddmultiple"
@using MyBudget.Components
@using MyBudget.Models
@using MyBudget.Services
@using MyBudget.Helpers
@using System.Globalization
@inject IHistoryService<ExpenseHistory> expenseHistoryService
@inject IService<ExpenseCategories> expenseCategoryService

<h3 style="text-align:center;">Add Multiple Expense Histories</h3>
<div style="margin-top:5px;margin-bottom:5px;">
	<LinkButton _href="/expensehistorypage" _text="Back to Expense History"></LinkButton>
	<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="AddRow">Add Row</MudButton>
	<MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="DeleteRow">Delete Row</MudButton>
	<MudButton Variant="Variant.Filled" Color="Color.Success" @onclick="ProcessList" style="float:right;">Submit</MudButton>
</div>

<table class="table table-striped table-bordered table-styles">
	<thead>
		<tr>
			<th>Row</th>
			<th>Expense Name</th>
			<th>Amount Paid</th>
			<th>Expense Date</th>
			<th>Expense Category</th>
			<th></th>
		</tr>
	</thead>
	<tbody>
		@foreach (var expense in expenseHistoryList)
		{
		<tr>
			<td><input @bind="expense.ExpenseHistoryId" type="number" disabled="disabled" class="border-1" /></td>
			<td><input type="text" @bind="expense.ExpenseName" maxlength="20" class="border-1" on/></td>
			<td><input type="number" @bind="expense.AmountPaid" min="0" max="999999999" class="border-1" /></td>
			<td><input type="date" @bind="expense.ExpenseDate" class="border-1" /></td>
			<td>
				<select @bind="expense.ExpenseCategoryId" class="border-1">
					@foreach (var category in expenseCategoryList)
					{
						<option value="@category.ExpenseCategoryId">@category.ExpenseCategoryName</option>
					}
				</select>
			</td>
			<td>
				<MudIcon Icon="@Icons.Filled.DeleteOutline" Color="Color.Error" Title="delete"
				@onclick="() => RemoveElement(expense.ExpenseHistoryId)" class="mud-table-button" style="text-align:center;" />
			</td>
		</tr>
		}
	</tbody>
</table>

<div style="margin-top:5px;margin-bottom:5px;">
	<LinkButton _href="/expensehistorypage" _text="Back to Expense History"></LinkButton>
	<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="AddRow">Add Row</MudButton>
	<MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="DeleteRow">Delete Row</MudButton>
	<MudButton Variant="Variant.Filled" Color="Color.Success" @onclick="ProcessList" style="float:right;">Submit</MudButton>
</div>

@code {

	ExpenseHistory expenseHistory = new();
	List<ExpenseHistory> expenseHistoryList = new();
	List<ExpenseCategories> expenseCategoryList = new();

	List<ExpenseHistory> badRequestList = new();

	[Inject] ISnackbar Snackbar { get; set; }

	protected override async Task OnInitializedAsync()
	{
		expenseCategoryList = await expenseCategoryService.GetList();
		expenseHistoryList.Add(GetInitialExpenseHistory());
	}

	void AddRow()
	{
		if (expenseHistoryList.Count >= 25)
		{
			Snackbar.Add("Max of 25 new additions", Severity.Info);
			return;
		}

		expenseHistoryList.Add(GetNextRow());
	}

	void DeleteRow()
	{
		var lastIndex = expenseHistoryList.LastOrDefault();
		expenseHistoryList.Remove(lastIndex);
	}

	void RemoveElement(int id)
	{
		var a = expenseHistoryList.Where(e => e.ExpenseHistoryId == id).First();
		expenseHistoryList.Remove(a);
		ReIndexList();
	}

	ExpenseHistory GetInitialExpenseHistory()
	{
		return new() { ExpenseHistoryId = 1, ExpenseDate = DateTime.Now };
	}

	ExpenseHistory GetNextRow()
	{
		return new() { ExpenseHistoryId = NextId(), ExpenseDate = DateTime.Now };
	}

	int NextId()
	{
		return expenseHistoryList.Count + 1;
	}

	void ReIndexList()
	{
		int currentIndex = 1;

		foreach (var expense in expenseHistoryList)
		{
			expense.ExpenseHistoryId = currentIndex;
			currentIndex++;
		}
	}

	async Task ProcessList()
	{
		List<ExpenseHistory> badRequestList = new();
		int listCount = expenseHistoryList.Count;

		foreach (var expense in expenseHistoryList)
		{
			//TODO Check for null values
			var result = await SaveRecord(expense);

			if (result == false)
			{
				badRequestList.Add(expense);
			}
		}

		if (badRequestList.Count > 0)
		{
			ErrorsOnSomeRecords(listCount - badRequestList.Count);
		}
		else
		{
			AllRecordsSaved(listCount);
		}
	}

	// Save methods

	async Task<bool> SaveRecord(ExpenseHistory expense)
	{
		try
		{
			ExpenseHistory newExpenseHistory = GetNewModel(expense);

			var successResult = await expenseHistoryService.CreateRecord(newExpenseHistory);

			return successResult.ExpenseHistoryId > 0 ? true : false;
		}
		catch (Exception e)
		{
			Snackbar.Add(e.Message, Severity.Error);
			return false;
		}
	}

	ExpenseHistory GetNewModel(ExpenseHistory expense)
	{
		return new()
		{
			ExpenseName = expense.ExpenseName,
			AmountPaid = expense.AmountPaid,
			ExpenseDate = expense.ExpenseDate,
			ExpenseCategoryId = expense.ExpenseCategoryId
		};
	}

	void ErrorsOnSomeRecords(int successCount)
	{
		expenseHistoryList = badRequestList;
		badRequestList.Clear();
		ReIndexList();
		Snackbar.Add($"Successfully created {successCount} new records", Severity.Success);
		Snackbar.Add("Remaining records need attention before saving", Severity.Error);
	}

	void AllRecordsSaved(int listCount)
	{
		Snackbar.Add($"Successfully created {listCount} records", Severity.Success);
		expenseHistoryList.Clear();
		expenseHistoryList.Add(GetInitialExpenseHistory());
	}

	bool CheckForNullValues(ExpenseHistory expense)
	{
		if (string.IsNullOrEmpty(expense.ExpenseName))
		{
			return false;
		}
		if (expense.ExpenseDate.Year < 2000)
		{
			return false;
		}
		if (string.IsNullOrEmpty(expense.ExpenseCategoryId.ToString()))
		{
			return false;
		}

		return true;
	}
}
