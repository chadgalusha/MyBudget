@page "/expensetypespage"
@using MyBudget.Services
@using MyBudget.Models
@using MyBudget.Components
@inject ITypeService<ExpenseTypes> expenseTypeService

<h3 style="text-align:center">Expense Types</h3>

@if (expenseTypeList == null)
{
	<MyBudgetLoadingIndicator />
}
else
{
	<MudTable Items="@ExpenseTypeItems" Striped="true" class="table-styles" Dense="true" Filter="new Func<ExpenseTypes, bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
		<ToolBarContent>
			<MudText Typo="Typo.h6">Expense Type</MudText>
			<MudSpacer />
			<MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
		</ToolBarContent>
		<HeaderContent>
			<MudTh>Expense Type Id</MudTh>
			<MudTh>Expense Type</MudTh>
			<MudTh></MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="Expense Type Id">@context.ExpenseTypeId</MudTd>
			<MudTd DataLabel="Expense Type">@context.ExpenseType</MudTd>
			<MudTd>
				<MudIcon Icon="@Icons.TwoTone.Edit" Title="Edit" @onclick="(() => EditRecord(context))" class="mud-table-button" Color="Color.Info" />
				<MudIcon Icon="@Icons.TwoTone.Delete" Title="Delete" @onclick="(() => DeleteConfirm(context))" class="mud-table-button" Color="Color.Error" />
			</MudTd>
		</RowTemplate>
		<PagerContent>
			<MudTablePager />
		</PagerContent>
	</MudTable>

	<div id="add-button">
		<MudButton Variant="Variant.Filled" Color="Color.Success" @onclick="AddNewRecord">
			Add New Expense Type
		</MudButton>
	</div>

	@if (ShowPopup)
	{
		<div class="modal" tabindex="-1" style="display:block" role="dialog">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h3 class="modal-title">Edit Expense Type</h3>
						<!-- Button to close the popup -->
						<button type="button" class="close"
						@onclick="ClosePopup">
							<span aria-hidden="true">X</span>
						</button>
					</div>
					<!-- Edit form for the current expense type -->
					<div class="modal-body">
						<input class="form-control" type="number" disabled="disabled"
					   @bind="expenseType.ExpenseTypeId" />
						<input class="form-control" type="text"
					   placeholder="New Type"
					   @bind="expenseType.ExpenseType" />
						<br />
						<!-- Button to save the expense type -->
						<button class="btn btn-success"
						@onclick="SaveRecord">
							Save
						</button>&nbsp;
						<!-- Only show delete button if not a new record -->
						@if (expenseType.ExpenseTypeId > 0)
						{
							<!-- Button to delete the expense type -->
							<button class="btn btn-danger"
						@onclick="() => DeleteConfirm(expenseType)">
								Delete
							</button>
						}
					</div>
				</div>
			</div>
		</div>
	}
}

@code {
	List<ExpenseTypes> expenseTypeList;
	ExpenseTypes expenseType = new();
	bool ShowPopup = false;

	private string searchString1 = "";
	private ExpenseTypes selectedItem1 = null;
	private HashSet<ExpenseTypes> selectedItems = new();
	private IEnumerable<ExpenseTypes> ExpenseTypeItems = new List<ExpenseTypes>();

	[Inject] IDialogService DialogService { get; set; }
	[Inject] ISnackbar Snackbar { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await LoadData();
	}

	async Task LoadData()
	{
		expenseTypeList = await expenseTypeService.GetList();
		ExpenseTypeItems = expenseTypeList;
	}

	void ClosePopup()
	{
		ShowPopup = false;
	}

	void AddNewRecord()
	{
		expenseType = new ExpenseTypes();
		expenseType.ExpenseTypeId = 0;
		ShowPopup = true;
	}

	void EditRecord(ExpenseTypes type)
	{
		expenseType = type;
		ShowPopup = true;
	}

	async Task SaveRecord()
	{
		ShowPopup = false;

		try
		{
			if (expenseType.ExpenseTypeId == 0)
			{
				ExpenseTypes newExpenseType = new()
				{
					ExpenseType = expenseType.ExpenseType
				};

				var createdExpenseType = await expenseTypeService.CreateRecord(newExpenseType);
				CreateResultProcessor(createdExpenseType);
			}
			else
			{
				var updatedRecord = await expenseTypeService.UpdateRecord(expenseType);
				UpdateResultProcessor(updatedRecord);
			}
		}
		catch (Exception e)
		{
			CatchErrorMessage(e);
		}
	}

	async Task DeleteConfirm(ExpenseTypes type)
	{
		bool? confirmed = await DialogService.ShowMessageBox(
			"Warning", $"Permanently Delete {type.ExpenseType}?",
			yesText: "Delete", cancelText: "Cancel");

		if (confirmed == true) { await DeleteRecord(type); }
	}

	async Task DeleteRecord(ExpenseTypes type)
	{
		ShowPopup = false;

		try
		{
			var deleteExpenseTypeResult = await expenseTypeService.DeleteRecord(type);
			DeleteResultProcessor(deleteExpenseTypeResult);
		}
		catch (Exception e)
		{
			CatchErrorMessage(e);
		}	
	}

	// CRUD help methods

	void ProcessingErrorMessage() { Snackbar.Add("Error processing record, please try again", Severity.Error); }
	void DuplicateNameMessage() { Snackbar.Add("Duplicate Expense Type name, please try again", Severity.Error); }
	void TypeInUseMessage() { Snackbar.Add("Expense Type in use by 1 or more expenses", Severity.Error); }
	void CatchErrorMessage(Exception e) { Snackbar.Add($"{e.Message}", Severity.Error); }

	void CreateResultProcessor(ExpenseTypes type)
	{
		switch (type.ExpenseTypeId)
		{
			case 0:
				ProcessingErrorMessage();
				break;
			case -1:
				DuplicateNameMessage();
				break;
			default:
				expenseTypeList.Add(type);
				ExpenseTypeItems = expenseTypeList;
				Snackbar.Add("Expense Type Added", Severity.Success);
				break;
		}
	}

	async void UpdateResultProcessor(ExpenseTypes type)
	{
		if (type.ExpenseTypeId == -1)
		{
			DuplicateNameMessage();
			await LoadData();
			return;
		}
		if (type.ExpenseTypeId == 0)
		{
			ProcessingErrorMessage();
			await LoadData();
		}
	}

	void DeleteResultProcessor(ExpenseTypes type)
	{
		switch (type.ExpenseTypeId)
		{
			case 0:
				ProcessingErrorMessage();
				break;
			case -1:
				TypeInUseMessage();
				break;
			default:
				expenseTypeList.Remove(type);
				ExpenseTypeItems = expenseTypeList;
				Snackbar.Add("Expense Type Deleted", Severity.Success);
				break;
		}
	}

	// Search Functions

	private bool FilterFunc1(ExpenseTypes type) => FilterFunc(type, searchString1);

	private bool FilterFunc(ExpenseTypes type, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (type.ExpenseType.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}
}
