@page "/bankaccountspage"
@using MyBudget.Services
@using MyBudget.Models
@using MyBudget.Helpers
@using System.Globalization
@using MyBudget.Components
@inject IService<BankAccounts> bankAccountService
@inject ITypeService<BankAccountTypes> bankAccountTypeService

<h3 style="text-align:center">Bank Accounts</h3>

@if (bankAccountsList == null || bankAccountTypeList == null)
{
	<MyBudgetLoadingIndicator />
}
else
{
	<MudTable Items="@BankAccountItems" Striped="true" class="table-styles" Dense="true" Filter="new Func<BankAccounts, bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1" >
		<ToolBarContent>
			<MudText Typo="Typo.h6">Bank Accounts</MudText>
			<MudSpacer />
			<MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
		</ToolBarContent>
		<HeaderContent>
			<MudTh style="display:none;">Bank Account Id</MudTh>
			<MudTh>Bank Account Name</MudTh>
			<MudTh>Bank Account Type</MudTh>
			<MudTh>Balance</MudTh>
			<MudTh></MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="Bank Account Id" style="display:none;">@context.BankAccountId</MudTd>
			<MudTd DataLabel="Bank Account Name">@context.BankAccountName</MudTd>
			<MudTd DataLabel="Bank Account Type">@GetBankAccountTypeName(context.BankAccountTypeId, bankAccountTypeList)</MudTd>
			<MudTd DataLabel="Balance">@context.Balance.ToString("C2", CultureInfo.CurrentCulture)</MudTd>
			<MudTd>
				<MudIcon Icon="@Icons.TwoTone.Edit" Title="Edit" @onclick="(() => EditRecord(context))" class="mud-table-button" Color="Color.Info" />
				<MudIcon Icon="@Icons.TwoTone.Delete" Title="Delete" @onclick="(() => DeleteConfirm(context))" class="mud-table-button" Color="Color.Error" />
			</MudTd>
		</RowTemplate>
		<PagerContent>
			<MudTablePager />
		</PagerContent>
	</MudTable>

	<div id="add-button">
		<MudButton Variant="Variant.Filled" Color="Color.Success" @onclick="AddNewRecord">
			Add New Bank Account
		</MudButton>
	</div>

	@if (ShowPopup)
	{
		<div class="modal" tabindex="-1" style="display:block" role="dialog">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h3 class="modal-title">Edit Bank Account</h3>
						<!-- Button to close the popup -->
						<button type="button" class="close"
						@onclick="ClosePopup">
							<span aria-hidden="true">X</span>
						</button>
					</div>
					<!-- Edit form for the current bank account -->
					<div class="modal-body">
						<label for="bankaccountid">Bank Account Id: </label>
						<input class="form-control" type="number" disabled="disabled"
					   @bind="bankAccount.BankAccountId" id="bankaccountid" />
						<label for="bankaccountname">Bank Account Name: </label>
						<input class="form-control" type="text"
					   placeholder="Bank Account Name"
					   @bind="bankAccount.BankAccountName" id="bankaccountname" />

						<label for="bankaccounttype">Bank Account Type: </label>
						<select class="form-select" title="Bank Account Type Required" @bind="bankAccount.BankAccountTypeId" id="bankaccounttype">
							<option value="Select" disabled="disabled">Choose Bank Account Type</option>
							@foreach (var bankAccountType in bankAccountTypeList)
							{
								<option value="@bankAccountType.BankAccountTypeId">@bankAccountType.BankAccountType</option>
							}
						</select>

						<label for="bankaccountbalance">Balance: </label>
						<input class="form-control" type="number"
					   @bind="bankAccount.Balance" id="bankaccountbalance" />
						<br />
						<!-- Button to save the bank account -->
						<button class="btn btn-success"
						@onclick="SaveRecord">
							Save
						</button>&nbsp;
						<!-- Only show delete button if not a new bank account -->
						@if (bankAccount.BankAccountId > 0)
						{
							<!-- Button to delete the bank account -->
							<button class="btn btn-danger"
						@onclick="() => DeleteConfirm(bankAccount)">
								Delete
							</button>
						}
					</div>
				</div>
			</div>
		</div>
	}
}

@code {
	List<BankAccounts> bankAccountsList;
	List<BankAccountTypes> bankAccountTypeList;
	BankAccounts bankAccount = new();
	bool ShowPopup = false;

	private string searchString1 = "";
	private BankAccounts selectedItem1 = null;
	private HashSet<BankAccounts> selectedItems = new();
	private IEnumerable<BankAccounts> BankAccountItems = new List<BankAccounts>();

	[Inject] IDialogService DialogService { get; set; }
	[Inject] ISnackbar Snackbar { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await LoadData();
	}

	async Task LoadData()
	{
		bankAccountsList = await bankAccountService.GetList();
		BankAccountItems = bankAccountsList;
		bankAccountTypeList = await bankAccountTypeService.GetList();
	}

	void ClosePopup()
	{
		ShowPopup = false;
	}

	void AddNewRecord()
	{
		bankAccount = new BankAccounts()
		{
			BankAccountId = 0,
		};
		ShowPopup = true;
	}

	void EditRecord(BankAccounts bankAccountToEdit)
	{
		bankAccount = bankAccountToEdit;
		ShowPopup = true;
	}

	async Task SaveRecord()
	{
		ShowPopup = false;

		try
		{
			if (bankAccount.BankAccountId == 0)
			{
				BankAccounts newBankAccount = new()
				{
					BankAccountName = bankAccount.BankAccountName,
					BankAccountTypeId = bankAccount.BankAccountTypeId,
					Balance = bankAccount.Balance
				};

				var createdBankAccount = await bankAccountService.CreateRecord(newBankAccount);
				CreateResultProcessor(createdBankAccount);
			}
			else
			{
				var updatedBankAccount = await bankAccountService.UpdateRecord(bankAccount);
				UpdateResultProcessor(updatedBankAccount);
			}
		}
		catch (Exception e)
		{
			CatchErrorMessage(e);
		}
	}

	async Task DeleteConfirm(BankAccounts bankAccount)
	{
		bool? confirmed = await DialogService.ShowMessageBox(
			"Warning", $"Permanently Delete {bankAccount.BankAccountName}?",
			yesText: "Delete", cancelText: "Cancel");

		if (confirmed == true) { await DeleteRecord(bankAccount); }
	}

	async Task DeleteRecord(BankAccounts bankAccount)
	{
		ShowPopup = false;

		try
		{
			var deletedBankAccount = await bankAccountService.DeleteRecord(bankAccount);
			DeleteResultProcessor(deletedBankAccount);
		}
		catch (Exception e)
		{
			CatchErrorMessage(e);
		}
	}

	// CRUD help methods

	void ProcessingErrorMessage() { Snackbar.Add("Error processing record, please try again", Severity.Error); }
	void DuplicateNameMessage() { Snackbar.Add("Duplicate Bank Account name, please try again", Severity.Error); }
	void CatchErrorMessage(Exception e) { Snackbar.Add($"{e.Message}", Severity.Error); }

	void CreateResultProcessor(BankAccounts account)
	{
		switch (account.BankAccountId)
		{
			case 0:
				ProcessingErrorMessage();
				break;
			case -1:
				DuplicateNameMessage();
				break;
			default:
				bankAccountsList.Add(account);
				BankAccountItems = bankAccountsList;
				Snackbar.Add("Bank Account Added", Severity.Success);
				break;
		}
	}

	async void UpdateResultProcessor(BankAccounts account)
	{
		if (account.BankAccountId == -1)
		{
			DuplicateNameMessage();
			await LoadData();
			return;
		}
		if (account.BankAccountId == 0)
		{
			ProcessingErrorMessage();
			await LoadData();
		}
	}

	void DeleteResultProcessor(BankAccounts account)
	{
		switch (account.BankAccountId)
		{
			case 0:
				ProcessingErrorMessage();
				break;
			default:
				bankAccountsList.Remove(account);
				BankAccountItems = bankAccountsList;
				Snackbar.Add("Bank Account Deleted", Severity.Success);
				break;
		}
	}

	// helper methods

	string GetBankAccountTypeName(int id, List<BankAccountTypes> bankAccountTypeList)
	{
		return ItemFromList.GetNameFromTypeList(id, bankAccountTypeList);
	}

	// Search methods

	private bool FilterFunc1(BankAccounts bac) => FilterFunc(bac, searchString1);

	private bool FilterFunc(BankAccounts bac, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (bac.BankAccountName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if ($"{bac.BankAccountTypeId}".Contains(searchString))
			return true;
		if ($"{bac.Balance}".Contains(searchString))
			return true;
		return false;
	}
}
